PARSER_BEGIN(sintactico)
import java.util.*;
class sintactico
{
    public static void main ( String[] args) throws ParseException
    {
        try
        {
            sintactico a = new sintactico (System.in) ; 
            a.Analizar();
            System.out.println("La cadena fue aceptada correctamente");
        }
        catch(ParseException e)
        {
            System.out.println("Hubo un error ");
        }
    }

}
PARSER_END(sintactico)


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
    <#DIGITO:(["0"-"9"])+>
    | <#DECIMAL: <DIGITO>(".")?(<DIGITO>)?>
}


TOKEN :
{
    <CICLOS: ("for" | "foreach" | "while")>
	| <PROGRAMA: ("Program")>
	| <PREGUNTA: ("if")>
    | <IMPRIMIR: "cout"| "write" | "writeline">
    | <PUNTOYCOMA: ";">
    | <DOSPUNTOS: ":">
    | <TIPODATO: "int"|"decimal"|"string"|"hexdecimal"|"octal"|"bool"|"var">
    | <TIPOACCESO: "public"|"static"|"interal"|"abstract">
    | <OPRELACIONAL: "<=" | ">=" | "==" | "<" | ">"| "!=" >
    | <OPLOGICO: "&&" | "||" | "!" | "^^" | "~" >
    | <NUMERO:("+"|"-")?(<DECIMAL>)+>
    | <RECORRIDA: "<<"|">>" >
    | <LLAVEIZQ: "{" >
    | <LLAVEDER: "}" >
    | <ALEATORIO: "random">
    | <CORCHETEIZQ: "[" >
    | <CORCHETEDER : "]" >
    | <PARENTESISIZQ: "(" >
    | <PARENTESISDER: ")" >
    | <IGUAL: "=">
    | <ADICIONSUSTRACCION: "++" | "--" >
    | <OPERADORES: "+" | "-" | "*" | "/" >
    | <SIGUIENTE: "Next" >
    | <SINO: "else">
    | <PUNTO: "." >
    | <HACER : "do">
    | <TIEMPO : "DateTime">
    | <AHORA: "Now">
    | <ESTRUCTDATOS: "Stack" | "Queue" | "List">
    | <NUEVO: "new">
    | <PILAS: "push" | "pop" | "peek" >
    | <COLAS: "enqueue" | "dequeue" >
    | <ESPACIONOMB: "namespace">
    | <USANDO: "Using">
    | <SISTEMA: "System">
    | <ARCHIVO: "File">
    | <CREAR: "Create">
    | <ADDLIST: "Add">
    | <MATEMATICAS: "Math">
    | <MAX: "Max">
    | <MIN: "Min">
    | <REDONDEAR: "Round">
    | <COMA: ",">
    | <CLASE: "class">
    | <PROCESO: "void">
    | <COMILLA: "'">
    | <SWITCH: "switch">
    | <CASO: "case">
    | <IDENTIFICADOR : (["A"-"Z","a"-"z","0"-"9","_"])+>
}


void Analizar(): {}
{
	<USANDO> <SISTEMA> <PUNTOYCOMA> <ESPACIONOMB> <IDENTIFICADOR> <LLAVEIZQ> Programa() <LLAVEDER> <EOF>
}

void Programa(): {}
{
    <CLASE> <PROGRAMA> <LLAVEIZQ> Main() <LLAVEDER> 
}

void Main(): {}
{
    <TIPOACCESO> <PROCESO> <IDENTIFICADOR> <PARENTESISIZQ> <PARENTESISDER> <LLAVEIZQ> Bloque() <LLAVEDER> 
}

void Bloque(): {}
{
    ( instructFOR() | Impresiones() | Identifica() | insIF() | instructDOWHILE() | asign() | creaTiempo() | creaESTRUCTURA() | CrearArchivo() | Matematicas() | AltSwitch() | Casos())*
}

void instructFOR(): {} //1
{
	<CICLOS>  condicionControl() <LLAVEIZQ> Bloque() <LLAVEDER> Bloque()
}

void condicionControl(): {}
{
	<PARENTESISIZQ> asign() Identifica() Identifica() <PARENTESISDER>
}

void asign(): {}
{
    <TIPODATO> (asignacion() | DeclArray() )
}

void asignacion(): {} //2
{
    <IDENTIFICADOR> <IGUAL> (<IDENTIFICADOR>|<NUMERO>) <PUNTOYCOMA>
}

void Identifica(): {} 
{
    <IDENTIFICADOR> (condicion() | incremento() | Aleatorio() | FuncEstructura() )
}

void condicion(): {} 
{
	<OPRELACIONAL> (<IDENTIFICADOR>|<NUMERO>) <PUNTOYCOMA>
}

void incremento(): {}
{
	<ADICIONSUSTRACCION>
}
void Impresiones(): {}
{
    <IMPRIMIR> (instructIMPRIME() | altPRINT() )
}

void instructIMPRIME(): {} //3
{
    <RECORRIDA> salida()
}

void salida(): {}
{
    <PARENTESISIZQ> (<IDENTIFICADOR>)* <PARENTESISDER> <OPERADORES> (<IDENTIFICADOR> | <NUMERO>) <PUNTOYCOMA> Bloque()
}

void Aleatorio(): {} //4
{
    <CORCHETEIZQ> <IDENTIFICADOR> <CORCHETEDER> <IGUAL> <ALEATORIO> <PUNTO> <SIGUIENTE> <PARENTESISIZQ> <NUMERO> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void insIF(): {}
{
    <PREGUNTA> (instrucPREGUNTA() | altIF() )
}

void instrucPREGUNTA(): {} //5
{
    condicionIF() <LLAVEIZQ> Bloque() <LLAVEDER> <SINO> <LLAVEIZQ> Bloque() <LLAVEDER> Bloque() 
}

void condicionIF(): {}
{
    <PARENTESISIZQ> <IDENTIFICADOR> <OPRELACIONAL> (<IDENTIFICADOR> | <NUMERO>) <PARENTESISDER> 
}

void instructDOWHILE(): {} //6
{
    <HACER> <LLAVEIZQ> Bloque() <LLAVEDER> <CICLOS> condicionWHILE() Bloque()
}

void condicionWHILE(): {}
{
    <PARENTESISIZQ> <IDENTIFICADOR> <OPRELACIONAL> (<IDENTIFICADOR> | <NUMERO>) <PARENTESISDER>
}

void creaTiempo(): {} //7
{
    <TIEMPO> <IDENTIFICADOR> <IGUAL> <TIEMPO> <PUNTO> <AHORA> <PUNTOYCOMA> Bloque()
}

void creaESTRUCTURA(): {} //8
{
    <ESTRUCTDATOS> <IDENTIFICADOR> <IGUAL> <NUEVO> <ESTRUCTDATOS> <PARENTESISIZQ> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void FuncEstructura(): {}
{
    <PUNTO> (ponerPILA() | ponerCOLA() | PonerLista() )
}

void ponerPILA(): {} //9
{
    <PILAS> <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void ponerCOLA(): {} //10
{
    <COLAS> <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void DeclArray(): {} //11
{
    <CORCHETEIZQ> <CORCHETEDER> <IDENTIFICADOR> <IGUAL> <NUEVO> <TIPODATO> <CORCHETEIZQ> <NUMERO> <CORCHETEDER> <PUNTOYCOMA>
}

void CrearArchivo(): {} //12
{
    <ARCHIVO> <PUNTO> <CREAR> <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void PonerLista(): {} //13
{
    <ADDLIST> <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void Matematicas(): {}
{
    <MATEMATICAS> <PUNTO> (Maximo() | Redondeo() | Minimo() ) Bloque()
}

void Maximo(): {} //14
{
    <MAX> <PARENTESISIZQ> (<IDENTIFICADOR> | <NUMERO>) <COMA> (<IDENTIFICADOR> | <NUMERO>) <PARENTESISDER> <PUNTOYCOMA>
}

void Redondeo(): {} //15
{
    <REDONDEAR> <PARENTESISIZQ> (<IDENTIFICADOR> | <NUMERO>) <PARENTESISDER> <PUNTOYCOMA>
}

void Minimo(): {} //16
{
    <MIN> <PARENTESISIZQ> (<IDENTIFICADOR> | <NUMERO>) <COMA> (<IDENTIFICADOR> | <NUMERO>) <PARENTESISDER> <PUNTOYCOMA>
}

void altPRINT(): {} //17alt1
{
    <COMILLA> (<IDENTIFICADOR>)* <COMILLA> Bloque()
}

void altIF(): {} //18alt2
{
    <IDENTIFICADOR> <OPRELACIONAL> (<IDENTIFICADOR> | <NUMERO>)  Bloque() <SINO> Bloque()
}

void AltSwitch(): {} //19alt3
{
    <SWITCH> <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> Casos() Bloque()
}

void Casos(): {}
{
    <CASO> <IDENTIFICADOR> Bloque()
}
