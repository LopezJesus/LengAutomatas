PARSER_BEGIN(sintactico)
import java.util.*;
class sintactico
{
    public static void main ( String[] args) throws ParseException
    {
        try
        {
            sintactico a = new sintactico (System.in) ; 
            a.Analizar();
            System.out.println("La cadena fue aceptada correctamente");
        }
        catch(ParseException e)
        {
            System.out.println("Hubo un error ");
        }
    }

}
PARSER_END(sintactico)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
    <#DIGITO:(["0"-"9"])+>
    | <#DECIMAL: <DIGITO>(".")?(<DIGITO>)?>
}


TOKEN :
{
    <CICLOS: ("for" | "foreach" | "while")>
	| <PROGRAMA: ("Program")>
	| <PREGUNTA: ("if")>
    | <IMPRIMIR: "cout"| "write" | "writeline">
    | <PUNTOYCOMA: ";">
    | <TIPODATO: "int"|"decimal"|"string"|"hexdecimal"|"octal"|"bool"|"var">
    | <OPRELACIONAL: "<=" | ">=" | "==" | "<" | ">"| "!=" >
    | <OPLOGICO: "&&" | "||" | "!" | "^^" | "~" >
    | <NUMERO:("+"|"-")?(<DECIMAL>)+>
    | <RECORRIDA: "<<"|">>" >
    | <LLAVEIZQ: "{" >
    | <LLAVEDER: "}" >
    | <ALEATORIO: "random">
    | <CORCHETEIZQ: "[" >
    | <CORCHETEDER : "]" >
    | <PARENTESISIZQ: "(" >
    | <PARENTESISDER: ")" >
    | <IGUAL: "=">
    | <ADICIONSUSTRACCION: "++" | "--" >
    | <OPERADORES: "+" | "-" | "*" | "/" >
    | <SIGUIENTE: "Next" >
    | <SINO: "else">
    | <PUNTO: "." >
    | <HACER : "do">
    | <TIEMPO : "DateTime">
    | <AHORA: "Now">
    | <ESTRUCTDATOS: "Stack" | "Queue">
    | <NUEVO: "new">
    | <PILAS: "push" | "pop" | "peek" >
    | <COLAS: "enqueue" | "dequeue" >   
    | <IDENTIFICADOR : (["A"-"Z","a"-"z","0"-"9","_"])+>
}


void Analizar(): {}
{
	<PROGRAMA> <IDENTIFICADOR> <LLAVEIZQ> Bloque() <LLAVEDER> <EOF>
}

void Bloque(): {}
{
    ( instructFOR() | instructIMPRIME() | Aleatorio() | instrucPREGUNTA() | instructDOWHILE() | asignacion() | creaTiempo() | creaESTRUCTURA() | ponerPILA() | ponerCOLA() )*
}

void instructFOR(): {} //1
{
	<CICLOS>  condicionControl() <LLAVEIZQ> Bloque() <LLAVEDER> Bloque()
}

void condicionControl(): {}
{
	<PARENTESISIZQ> asignacion() condicion() incremento() <PARENTESISDER>
}

void asignacion(): {} //2
{
	<TIPODATO> <IDENTIFICADOR> <IGUAL> (<IDENTIFICADOR>|<NUMERO>) <PUNTOYCOMA>
}

void condicion(): {}
{
	<IDENTIFICADOR>  <OPRELACIONAL> (<IDENTIFICADOR>|<NUMERO>) <PUNTOYCOMA>
}

void incremento(): {}
{
	<IDENTIFICADOR> <ADICIONSUSTRACCION>
}

void instructIMPRIME(): {} //3
{
    <IMPRIMIR> <RECORRIDA> salida()
}

void salida(): {}
{
    <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> <OPERADORES> (<IDENTIFICADOR> | <NUMERO>) <PUNTOYCOMA> Bloque()
}

void Aleatorio(): {} //4
{
    <IDENTIFICADOR> <CORCHETEIZQ> <IDENTIFICADOR> <CORCHETEDER> <IGUAL> <ALEATORIO> <PUNTO> <SIGUIENTE> <PARENTESISIZQ> <NUMERO> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void instrucPREGUNTA(): {} //5
{
    <PREGUNTA> condicionIF() <LLAVEIZQ> Bloque() <LLAVEDER> <SINO> <LLAVEIZQ> Bloque() <LLAVEDER> Bloque() 
}

void condicionIF(): {}
{
    <PARENTESISIZQ> <IDENTIFICADOR> <OPRELACIONAL> (<IDENTIFICADOR> | <NUMERO>) <PARENTESISDER> 
}

void instructDOWHILE(): {} //6
{
    <HACER> <LLAVEIZQ> Bloque() <LLAVEDER> <CICLOS> condicionWHILE() Bloque()
}

void condicionWHILE(): {}
{
    <PARENTESISIZQ> <IDENTIFICADOR> <OPRELACIONAL> (<IDENTIFICADOR> | <NUMERO>) <PARENTESISDER>
}

void creaTiempo(): {} //7
{
    <TIEMPO> <IDENTIFICADOR> <IGUAL> <TIEMPO> <PUNTO> <AHORA> <PUNTOYCOMA> Bloque()
}

void creaESTRUCTURA(): {} //8
{
    <ESTRUCTDATOS> <IDENTIFICADOR> <IGUAL> <NUEVO> <ESTRUCTDATOS> <PARENTESISIZQ> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void ponerPILA(): {} //9
{
    <PILAS> <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}

void ponerCOLA(): {} //10
{
    <COLAS> <PARENTESISIZQ> <IDENTIFICADOR> <PARENTESISDER> <PUNTOYCOMA> Bloque()
}
