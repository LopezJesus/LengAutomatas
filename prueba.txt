Using System;

namespace Prueba
{
	class Program 
	{
		static void Main()
		{
			int be=0;
			int ab=0;
			string palabra= beto;
			DateTime localDate = DateTime.Now;
			Stack miPila = new Stack();
			Queue miCola = new Queue();
			List  miLista = new List(); 
			int[] notas= new int[10];
			float[,] matrix= new float [a,2];

			File.Create(myPath);

			for(int a=0;a<10;a++) 
			{
				Numeros[a] = random.Next(50);
				cout << (Hola) + a;
				matrix[1,1]=25;
			}
			if(a<b)
			{
				cout << (Hola) + a;
				miPila.push(be);
				miLista.Add(palabra);
				int ab = 100 + be;				
			}
			else
			{
				cout << (Hola) + b;
				miCola.enqueue(ab);
				var Dinero = double.Parse(altura.Text);
			}
			do
			{
				cout << (Hola) + a;
				cout 'Buenas Tardes'
			}
			while(be < ab)
			
			Math.Max(100, 101);
			Math.Min(200, 403);
			Math.Round(250.2);

			if a<b
				miCola.enqueue(ab);
			else
				miCola.enqueue(be);
			
			switch(a) 
				case a
				miCola.enqueue(Hola);

				case b
				miCola.enqueue(Buenos);
				

				case c
				miCola.enqueue(Dias);
			SELECT * FROM MyDataBase

			while: a <= 100 do
				miCola.enqueue(Dias);
				write:styles.italic << 'Hola mundo'
			
			try
			foreach: int nota >> notas
				cout << (Las notas son) + nota;
				ProcesoSaludo>> a b c			
			catch >> DivideByZero

			public void ProcesoSaludo >> int a int b int c
				case a
				miCola.enqueue(Hola);

				case b
				miCola.enqueue(Buenos);
				
				case c
				miCola.enqueue(Dias);

			[3,3] Float Matriz
		}
	}
}
